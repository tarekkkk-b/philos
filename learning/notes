# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    notes                                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: tabadawi <tabadawi@student.42abudhabi.a    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/05/02 14:55:47 by tabadawi          #+#    #+#              #
#    Updated: 2024/05/09 15:55:18 by tabadawi         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

- so the whole concept behind philos is to teach u ab multi processes running in
	parallels (threads) and also ask u to attemp it in the bonus with (forks)

- each philo has a routine and there are three things that they need to do:
	* eat
	* sleep
	* think

- the args for this project are
	* the number of philos
	* the time a philo dies if he doesnt eat
	* the time it takes for a philo to eat
	* the time a philo needs to sleep
	* number of meals every philo should have b4 terminating (optional argument)

- this tells us that basicall every philo should eat for a particular time, sleep
	for a particular time, and when he cant do either, he "thinks", but he needs
	to be able to eat before enough time passes for him to die

- the main problem is that you only have forks as many as the philos u have, but it
	takes every philo two forks to eat, so we need to find an algorithm to distribute 
	the tasks in a way where it would work

- the optional argument (number of meals) if existed would terminate the program
	when reaching that point, else it should run infinetely (if the values make sense)

- as required by the subject (and i believe for logical reason) eacho philo should
	be a thread

- the way threads work is they run parallel and share the same memory so they can
	overwrite eachother, to handle that we use "mutex" which basically locks and
	unlocks, meaning it arranges and manages the threads running so the data is 
	organized rather than tossed around

- one thing to note as well is that the time for death starts counting resets when
	a philo STARTS eating

- i think ill start simulating with a while loop that immitates what i want my
	logic to do before translating into code